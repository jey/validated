[
  {
    "type":"() => void",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":8,"column":10,"offset":106},
      "end":{"line":8,"column":26,"offset":123}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":8,
    "endline":8,
    "start":10,
    "end":26
  },
  {
    "type":"Node<{|age: number, email: string, name: string|}>",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":10,"column":9,"offset":153},
      "end":{"line":10,"column":20,"offset":165}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":10,
    "endline":10,
    "start":9,
    "end":20
  },
  {
    "type":"{|AnyNode: class AnyNode<V>, BooleanNode: class BooleanNode, ConstantNode: class ConstantNode<V>, Context: class Context, EnumerationNode: class EnumerationNode<V>, ExtractType: type ExtractType<N: Node<any>> = _ExtractType<*, N>, MappingNode: class MappingNode<V>, MaybeNode: class MaybeNode<V>, Node: class Node<V>, NodeSpec: type NodeSpec = {type: \"boolean\"} | {type: \"string\"} | {type: \"number\"} | {type: \"any\"} | {type: \"maybe\", value: NodeSpec} | {type: \"mapping\", value: NodeSpec} | {type: \"sequence\", value: NodeSpec} | {defaults: {[key: string]: any}, type: \"object\", values: {[key: string]: NodeSpec}}, NumberNode: class NumberNode, ObjectNode: class ObjectNode<S: {[name: string]: Node<any>}>, OneOfNode: class OneOfNode<V>, RecursiveNode: class RecursiveNode<V>, RefineNode: class RefineNode<V, RV>, SequenceNode: class SequenceNode<V>, StringNode: class StringNode, ValidateResult: type ValidateResult<V> = {+context: Context, +value: V}, ValidationError: any, any: AnyNode<any>, arrayOf: <V>(valueNode?: Node<V>) => SequenceNode<V>, boolean: BooleanNode, constant: <V>(value: V, eq?: (v1: mixed, v2: mixed) => boolean) => ConstantNode<V>, enumeration: <A>(...values: A[]) => EnumerationNode<A>, mapping: <V>(valueNode?: Node<V>) => MappingNode<V>, maybe: <V>(valueNode: Node<V>) => MaybeNode<V>, number: NumberNode, object: <S: {[name: string]: Node<any>}>(values: S, defaults: ?Object) => Node<empty>, oneOf: ((<A, B, C, D, E, F, G, H, I, J, K>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>, h: Node<H>, i: Node<I>, j: Node<J>, k: Node<K>) => Node<(A | B | C | D | E | F | G | H | I | J | K)>) & (<A, B, C, D, E, F, G, H, I, J>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>, h: Node<H>, i: Node<I>, j: Node<J>) => Node<(A | B | C | D | E | F | G | H | I | J)>) & (<A, B, C, D, E, F, G, H, I>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>, h: Node<H>, i: Node<I>) => Node<(A | B | C | D | E | F | G | H | I)>) & (<A, B, C, D, E, F, G, H>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>, h: Node<H>) => Node<(A | B | C | D | E | F | G | H)>) & (<A, B, C, D, E, F, G>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>) => Node<(A | B | C | D | E | F | G)>) & (<A, B, C, D, E, F>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>) => Node<(A | B | C | D | E | F)>) & (<A, B, C, D, E>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>) => Node<(A | B | C | D | E)>) & (<A, B, C, D>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>) => Node<(A | B | C | D)>) & (<A, B, C>(a: Node<A>, b: Node<B>, c: Node<C>) => Node<(A | B | C)>) & (<A, B>(a: Node<A>, b: Node<B>) => Node<(A | B)>) & (<A>(a: Node<A>) => Node<A>)), partialObject: <S: {[name: string]: Node<any>}>(values: S, defaults: ?Object) => Node<empty>, recur: <V>(thunk: (node: Node<V>) => Node<V>) => Node<V>, sequence: <V>(valueNode?: Node<V>) => SequenceNode<V>, string: StringNode, validationError: (originalMessage: ?GenericMessage, contextMessages: GenericMessage[]) => any|}",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":10,"column":24,"offset":168},
      "end":{"line":10,"column":24,"offset":169}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":10,
    "endline":10,
    "start":24,
    "end":24
  },
  {
    "type":"Node<{|age: number, email: string, name: string|}>",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":10,"column":24,"offset":168},
      "end":{"line":10,"column":88,"offset":233}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":10,
    "endline":10,
    "start":24,
    "end":88
  },
  {
    "type":"{|age: NumberNode, email: StringNode, name: StringNode|}",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":10,"column":40,"offset":184},
      "end":{"line":10,"column":87,"offset":232}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":10,
    "endline":10,
    "start":40,
    "end":87
  },
  {
    "type":"{|AnyNode: class AnyNode<V>, BooleanNode: class BooleanNode, ConstantNode: class ConstantNode<V>, Context: class Context, EnumerationNode: class EnumerationNode<V>, ExtractType: type ExtractType<N: Node<any>> = _ExtractType<*, N>, MappingNode: class MappingNode<V>, MaybeNode: class MaybeNode<V>, Node: class Node<V>, NodeSpec: type NodeSpec = {type: \"boolean\"} | {type: \"string\"} | {type: \"number\"} | {type: \"any\"} | {type: \"maybe\", value: NodeSpec} | {type: \"mapping\", value: NodeSpec} | {type: \"sequence\", value: NodeSpec} | {defaults: {[key: string]: any}, type: \"object\", values: {[key: string]: NodeSpec}}, NumberNode: class NumberNode, ObjectNode: class ObjectNode<S: {[name: string]: Node<any>}>, OneOfNode: class OneOfNode<V>, RecursiveNode: class RecursiveNode<V>, RefineNode: class RefineNode<V, RV>, SequenceNode: class SequenceNode<V>, StringNode: class StringNode, ValidateResult: type ValidateResult<V> = {+context: Context, +value: V}, ValidationError: any, any: AnyNode<any>, arrayOf: <V>(valueNode?: Node<V>) => SequenceNode<V>, boolean: BooleanNode, constant: <V>(value: V, eq?: (v1: mixed, v2: mixed) => boolean) => ConstantNode<V>, enumeration: <A>(...values: A[]) => EnumerationNode<A>, mapping: <V>(valueNode?: Node<V>) => MappingNode<V>, maybe: <V>(valueNode: Node<V>) => MaybeNode<V>, number: NumberNode, object: <S: {[name: string]: Node<any>}>(values: S, defaults: ?Object) => Node<empty>, oneOf: ((<A, B, C, D, E, F, G, H, I, J, K>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>, h: Node<H>, i: Node<I>, j: Node<J>, k: Node<K>) => Node<(A | B | C | D | E | F | G | H | I | J | K)>) & (<A, B, C, D, E, F, G, H, I, J>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>, h: Node<H>, i: Node<I>, j: Node<J>) => Node<(A | B | C | D | E | F | G | H | I | J)>) & (<A, B, C, D, E, F, G, H, I>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>, h: Node<H>, i: Node<I>) => Node<(A | B | C | D | E | F | G | H | I)>) & (<A, B, C, D, E, F, G, H>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>, h: Node<H>) => Node<(A | B | C | D | E | F | G | H)>) & (<A, B, C, D, E, F, G>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>) => Node<(A | B | C | D | E | F | G)>) & (<A, B, C, D, E, F>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>) => Node<(A | B | C | D | E | F)>) & (<A, B, C, D, E>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>) => Node<(A | B | C | D | E)>) & (<A, B, C, D>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>) => Node<(A | B | C | D)>) & (<A, B, C>(a: Node<A>, b: Node<B>, c: Node<C>) => Node<(A | B | C)>) & (<A, B>(a: Node<A>, b: Node<B>) => Node<(A | B)>) & (<A>(a: Node<A>) => Node<A>)), partialObject: <S: {[name: string]: Node<any>}>(values: S, defaults: ?Object) => Node<empty>, recur: <V>(thunk: (node: Node<V>) => Node<V>) => Node<V>, sequence: <V>(valueNode?: Node<V>) => SequenceNode<V>, string: StringNode, validationError: (originalMessage: ?GenericMessage, contextMessages: GenericMessage[]) => any|}",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":10,"column":47,"offset":191},
      "end":{"line":10,"column":47,"offset":192}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":10,
    "endline":10,
    "start":47,
    "end":47
  },
  {
    "type":"StringNode",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":10,"column":47,"offset":191},
      "end":{"line":10,"column":54,"offset":199}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":10,
    "endline":10,
    "start":47,
    "end":54
  },
  {
    "type":"{|AnyNode: class AnyNode<V>, BooleanNode: class BooleanNode, ConstantNode: class ConstantNode<V>, Context: class Context, EnumerationNode: class EnumerationNode<V>, ExtractType: type ExtractType<N: Node<any>> = _ExtractType<*, N>, MappingNode: class MappingNode<V>, MaybeNode: class MaybeNode<V>, Node: class Node<V>, NodeSpec: type NodeSpec = {type: \"boolean\"} | {type: \"string\"} | {type: \"number\"} | {type: \"any\"} | {type: \"maybe\", value: NodeSpec} | {type: \"mapping\", value: NodeSpec} | {type: \"sequence\", value: NodeSpec} | {defaults: {[key: string]: any}, type: \"object\", values: {[key: string]: NodeSpec}}, NumberNode: class NumberNode, ObjectNode: class ObjectNode<S: {[name: string]: Node<any>}>, OneOfNode: class OneOfNode<V>, RecursiveNode: class RecursiveNode<V>, RefineNode: class RefineNode<V, RV>, SequenceNode: class SequenceNode<V>, StringNode: class StringNode, ValidateResult: type ValidateResult<V> = {+context: Context, +value: V}, ValidationError: any, any: AnyNode<any>, arrayOf: <V>(valueNode?: Node<V>) => SequenceNode<V>, boolean: BooleanNode, constant: <V>(value: V, eq?: (v1: mixed, v2: mixed) => boolean) => ConstantNode<V>, enumeration: <A>(...values: A[]) => EnumerationNode<A>, mapping: <V>(valueNode?: Node<V>) => MappingNode<V>, maybe: <V>(valueNode: Node<V>) => MaybeNode<V>, number: NumberNode, object: <S: {[name: string]: Node<any>}>(values: S, defaults: ?Object) => Node<empty>, oneOf: ((<A, B, C, D, E, F, G, H, I, J, K>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>, h: Node<H>, i: Node<I>, j: Node<J>, k: Node<K>) => Node<(A | B | C | D | E | F | G | H | I | J | K)>) & (<A, B, C, D, E, F, G, H, I, J>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>, h: Node<H>, i: Node<I>, j: Node<J>) => Node<(A | B | C | D | E | F | G | H | I | J)>) & (<A, B, C, D, E, F, G, H, I>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>, h: Node<H>, i: Node<I>) => Node<(A | B | C | D | E | F | G | H | I)>) & (<A, B, C, D, E, F, G, H>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>, h: Node<H>) => Node<(A | B | C | D | E | F | G | H)>) & (<A, B, C, D, E, F, G>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>) => Node<(A | B | C | D | E | F | G)>) & (<A, B, C, D, E, F>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>) => Node<(A | B | C | D | E | F)>) & (<A, B, C, D, E>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>) => Node<(A | B | C | D | E)>) & (<A, B, C, D>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>) => Node<(A | B | C | D)>) & (<A, B, C>(a: Node<A>, b: Node<B>, c: Node<C>) => Node<(A | B | C)>) & (<A, B>(a: Node<A>, b: Node<B>) => Node<(A | B)>) & (<A>(a: Node<A>) => Node<A>)), partialObject: <S: {[name: string]: Node<any>}>(values: S, defaults: ?Object) => Node<empty>, recur: <V>(thunk: (node: Node<V>) => Node<V>) => Node<V>, sequence: <V>(valueNode?: Node<V>) => SequenceNode<V>, string: StringNode, validationError: (originalMessage: ?GenericMessage, contextMessages: GenericMessage[]) => any|}",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":10,"column":62,"offset":206},
      "end":{"line":10,"column":62,"offset":207}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":10,
    "endline":10,
    "start":62,
    "end":62
  },
  {
    "type":"NumberNode",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":10,"column":62,"offset":206},
      "end":{"line":10,"column":69,"offset":214}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":10,
    "endline":10,
    "start":62,
    "end":69
  },
  {
    "type":"{|AnyNode: class AnyNode<V>, BooleanNode: class BooleanNode, ConstantNode: class ConstantNode<V>, Context: class Context, EnumerationNode: class EnumerationNode<V>, ExtractType: type ExtractType<N: Node<any>> = _ExtractType<*, N>, MappingNode: class MappingNode<V>, MaybeNode: class MaybeNode<V>, Node: class Node<V>, NodeSpec: type NodeSpec = {type: \"boolean\"} | {type: \"string\"} | {type: \"number\"} | {type: \"any\"} | {type: \"maybe\", value: NodeSpec} | {type: \"mapping\", value: NodeSpec} | {type: \"sequence\", value: NodeSpec} | {defaults: {[key: string]: any}, type: \"object\", values: {[key: string]: NodeSpec}}, NumberNode: class NumberNode, ObjectNode: class ObjectNode<S: {[name: string]: Node<any>}>, OneOfNode: class OneOfNode<V>, RecursiveNode: class RecursiveNode<V>, RefineNode: class RefineNode<V, RV>, SequenceNode: class SequenceNode<V>, StringNode: class StringNode, ValidateResult: type ValidateResult<V> = {+context: Context, +value: V}, ValidationError: any, any: AnyNode<any>, arrayOf: <V>(valueNode?: Node<V>) => SequenceNode<V>, boolean: BooleanNode, constant: <V>(value: V, eq?: (v1: mixed, v2: mixed) => boolean) => ConstantNode<V>, enumeration: <A>(...values: A[]) => EnumerationNode<A>, mapping: <V>(valueNode?: Node<V>) => MappingNode<V>, maybe: <V>(valueNode: Node<V>) => MaybeNode<V>, number: NumberNode, object: <S: {[name: string]: Node<any>}>(values: S, defaults: ?Object) => Node<empty>, oneOf: ((<A, B, C, D, E, F, G, H, I, J, K>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>, h: Node<H>, i: Node<I>, j: Node<J>, k: Node<K>) => Node<(A | B | C | D | E | F | G | H | I | J | K)>) & (<A, B, C, D, E, F, G, H, I, J>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>, h: Node<H>, i: Node<I>, j: Node<J>) => Node<(A | B | C | D | E | F | G | H | I | J)>) & (<A, B, C, D, E, F, G, H, I>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>, h: Node<H>, i: Node<I>) => Node<(A | B | C | D | E | F | G | H | I)>) & (<A, B, C, D, E, F, G, H>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>, h: Node<H>) => Node<(A | B | C | D | E | F | G | H)>) & (<A, B, C, D, E, F, G>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>, g: Node<G>) => Node<(A | B | C | D | E | F | G)>) & (<A, B, C, D, E, F>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>, f: Node<F>) => Node<(A | B | C | D | E | F)>) & (<A, B, C, D, E>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>, e: Node<E>) => Node<(A | B | C | D | E)>) & (<A, B, C, D>(a: Node<A>, b: Node<B>, c: Node<C>, d: Node<D>) => Node<(A | B | C | D)>) & (<A, B, C>(a: Node<A>, b: Node<B>, c: Node<C>) => Node<(A | B | C)>) & (<A, B>(a: Node<A>, b: Node<B>) => Node<(A | B)>) & (<A>(a: Node<A>) => Node<A>)), partialObject: <S: {[name: string]: Node<any>}>(values: S, defaults: ?Object) => Node<empty>, recur: <V>(thunk: (node: Node<V>) => Node<V>) => Node<V>, sequence: <V>(valueNode?: Node<V>) => SequenceNode<V>, string: StringNode, validationError: (originalMessage: ?GenericMessage, contextMessages: GenericMessage[]) => any|}",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":10,"column":79,"offset":223},
      "end":{"line":10,"column":79,"offset":224}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":10,
    "endline":10,
    "start":79,
    "end":79
  },
  {
    "type":"StringNode",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":10,"column":79,"offset":223},
      "end":{"line":10,"column":86,"offset":231}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":10,
    "endline":10,
    "start":79,
    "end":86
  },
  {
    "type":"type Person = ExtractType<Node<{|age: number, email: string, name: string|}>>",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":14,"column":3,"offset":352},
      "end":{"line":14,"column":51,"offset":401}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":14,
    "endline":14,
    "start":3,
    "end":51
  },
  {
    "type":"Person",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":18,"column":9,"offset":496},
      "end":{"line":18,"column":20,"offset":508}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":18,
    "endline":18,
    "start":9,
    "end":20
  },
  {
    "type":"{|validate: <V>(schema: Node<V>, value: mixed) => V|}",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":18,"column":24,"offset":511},
      "end":{"line":18,"column":24,"offset":512}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":18,
    "endline":18,
    "start":24,
    "end":24
  },
  {
    "type":"{|age: number, email: string, name: string|}",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":18,"column":24,"offset":511},
      "end":{"line":18,"column":51,"offset":539}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":18,
    "endline":18,
    "start":24,
    "end":51
  },
  {
    "type":"Node<{|age: number, email: string, name: string|}>",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":18,"column":35,"offset":522},
      "end":{"line":18,"column":46,"offset":534}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":18,
    "endline":18,
    "start":35,
    "end":46
  },
  {
    "type":"string",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":18,"column":49,"offset":536},
      "end":{"line":18,"column":50,"offset":538}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":18,
    "endline":18,
    "start":49,
    "end":50
  },
  {
    "type":"string",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":19,"column":9,"offset":549},
      "end":{"line":19,"column":20,"offset":561}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":19,
    "endline":19,
    "start":9,
    "end":20
  },
  {
    "type":"Person",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":19,"column":24,"offset":564},
      "end":{"line":19,"column":27,"offset":568}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":19,
    "endline":19,
    "start":24,
    "end":27
  },
  {
    "type":"string",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":19,"column":24,"offset":564},
      "end":{"line":19,"column":32,"offset":573}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":19,
    "endline":19,
    "start":24,
    "end":32
  },
  {
    "type":"number",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":21,"column":9,"offset":601},
      "end":{"line":21,"column":23,"offset":616}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":21,
    "endline":21,
    "start":9,
    "end":23
  },
  {
    "type":"Person",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":21,"column":27,"offset":619},
      "end":{"line":21,"column":30,"offset":623}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":21,
    "endline":21,
    "start":27,
    "end":30
  },
  {
    "type":"string",
    "reasons":[],
    "loc":{
      "source":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
      "type":"SourceFile",
      "start":{"line":21,"column":27,"offset":619},
      "end":{"line":21,"column":35,"offset":628}
    },
    "path":"/Users/jey/proj/validated/inference_bug/caseN/test_flow.js",
    "line":21,
    "endline":21,
    "start":27,
    "end":35
  }
]
